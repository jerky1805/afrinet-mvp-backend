@page "/register"
@using Afrinet.Models
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@inject HttpClient Http

<MudGrid>
    <MudItem xs="12" sm="7">
        <h2>Register for Mobile Money Account</h2>
        <MudPaper Class="pa-4 border-4">
            @* <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors" Model="@registerForm"
            OnValidSubmit="Submit"> *@
            <EditForm Model="@registerForm" OnValidSubmit="Submit">
                <DataAnnotationsValidator />
                <MudTextField T="string" Label="Surname" Required="true" RequiredError="User name are required!"
                    bind-Value="@registerForm.Surname" />
                <MudTextField T="string" Label="Other Names" Required="true" RequiredError="Other names are required!"
                    bind-Value="@registerForm.OtherNames" />
                <MudTextField T="string" Label="Phone Number" Required="true" RequiredError="Phone Number is required!"
                    bind-Value="@registerForm.MSISDN" />
                <MudTextField T="string" Label="Email" Required="true" RequiredError="Email is required!"
                    Validation="@(new EmailAddressAttribute() {ErrorMessage = "The email address is invalid"})"
                    bind-Value="@registerForm.Email" />
                <MudTextField T="string" Label="Password" HelperText="Choose a strong password" @ref="pwField1"
                    InputType="InputType.Password"
                    Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))" Required="true"
                    RequiredError="Password is required!" />
                <MudTextField T="string" Label="Password" HelperText="Repeat the password"
                    InputType="InputType.Password" Validation="@(new Func<string, string>(PasswordMatch))" />
                <MudDatePicker Label="Date of Birth" Editable="true" @bind-Date="date" Placeholder="Select Date"
                    DisplayMonths="2" TitleDateFormat="dddd, dd MMMM" DateFormat="dd/MM/yyyy" />
                <div class="d-flex">
                    <MudSelect T="string" Label="Profession" AnchorOrigin="Origin.BottomCenter">
                        <MudSelectItem Value="@("Student")" />
                        <MudSelectItem Value="@("IT Professional")" />
                        <MudSelectItem Value="@("Entrepreneur")" />
                        <MudSelectItem Value="@("Other")" />
                    </MudSelect>
                </div>
                <div class="d-flex align-center justify-space-between">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto"
                        ButtonType="ButtonType.Submit">
                        Register</MudButton>
                </div>
                @* </MudForm> *@
            </EditForm>
        </MudPaper>
    </MudItem>
    @if (errors.Length > 0)
    {
        <MudItem xs="12" sm="5">
            <MudPaper Class="pa-4 mud-height-full">
                <MudText Typo="Typo.subtitle2">@($"Errors ({errors.Length})")</MudText>
                @foreach (var error in errors)
                {
                    <MudText Color="@Color.Error">@error</MudText>
                }
            </MudPaper>
        </MudItem>
    }
    </MudGrid>


    @code {
    bool success = true;
    string[] errors = { };
    MudTextField<string> pwField1 = new MudTextField<string>();
    MudForm form = new MudForm();
    UserAccount registerForm { get; set; } = new();

    DateTime? date = DateTime.Today;
    private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Password is required!";
            yield break;
        }
        if (pw.Length < 8)
            yield return "Password must be at least of length 8";
        if (!Regex.IsMatch(pw, @"[A-Z]"))
            yield return "Password must contain at least one capital letter";
        if (!Regex.IsMatch(pw, @"[a-z]"))
            yield return "Password must contain at least one lowercase letter";
        if (!Regex.IsMatch(pw, @"[0-9]"))
            yield return "Password must contain at least one digit";
    }

    private string PasswordMatch(string arg)
    {
        if (pwField1.Value != arg)
            return "Passwords don't match";
        return null;
    }

    private async Task Submit(EditContext context)
    {
        await form.Validate();
        if (form.IsValid)
        {
            registerForm.Language = "English";
            registerForm.UserAccountRole = "Tier 1 KYC Subscriber";
            registerForm.Channels = new List<string> { "web", "mobile", "ussd", "qr" };
            await Http.PostAsJsonAsync("http://localhost:5032/api/Subscribers", registerForm);
        }

    }

}